# gerar_slides.py

import os
from datetime import datetime
from crewai import Task
from agents.level_6_slides import gerador_slides
from contexto.context_loader import carregar_contexto
from textwrap import dedent

# Carregar contexto do .yml
ctx = carregar_contexto()
projeto = ctx['projeto']
publico = ctx['publico_alvo']
# slides_cfg = ctx['slides']

def carregar_md_caminho():
    arquivos_md = [f for f in os.listdir() if f.startswith("relatorio_final_") and f.endswith(".md")]
    if not arquivos_md:
        raise FileNotFoundError("Nenhum relat√≥rio final encontrado no diret√≥rio atual.")
    arquivos_md.sort(reverse=True)  # pega o mais recente
    return arquivos_md[0]

if __name__ == "__main__":
    caminho_md = carregar_md_caminho()
    print(f"üìÑ Carregando relat√≥rio: {caminho_md}")

    with open(caminho_md, "r", encoding="utf-8") as f:
        relatorio_md = f.read()

    # Criar uma nova task passando o input diretamente
    slide_task = Task(
    description = dedent(f"""
    Voc√™ receber√° o conte√∫do de um relat√≥rio t√©cnico abaixo. Sua miss√£o √© transform√°-lo em **6 blocos de conte√∫do** formatados em **Markdown**, prontos para serem usados em **slides executivos**. Cada bloco corresponde a **um slide**, seguindo a estrutura abaixo.

    ### T√≥picos esperados (um por slide):
    1. **Escopo Funcional do Projeto**
    - O projeto contempla a disponibiliza√ß√£o de times ageis, equipes de sustenta√ß√£o e desenvolvimento e equipes de atendimento, dedicados ao desenvolvimento evolu√ß√£o, sustenta√ß√£o e opera√ß√µes programadas das solu√ß√µes. 
    - Dizer as incubencias de cada time e os perfis envolvidos no em cada time:
        - O time Agil faz as tarefas de ...... e possui os seguintes perfis .
        - A equipe de sustenta√ß√£o faz as tarefas de ...... e possui os seguintes perfis .
        - A equipe de atendimento faz as tarefas de ...... e possui os seguintes perfis .
    2. **Ciclo de Vida do Projeto**  
    - Liste as **fases principais com dura√ß√£o e entreg√°veis** em tabela  
    - Em seguida, crie uma **matriz RACI completa**:
        - Atividades nas linhas (ex: Defini√ß√£o de Backlog, Execu√ß√£o de est√≥rias, Valida√ß√£o Funcional, Planejamento do sprint e implanta√ß√£o/homologa√ß√£o)
        - Perfis nos cabe√ßalhos das colunas (ex: {projeto['empresa']}, Capco (empresa), Agile Master, Product Owner e L√≠dert T√©cnico.)
        - Utilize letras R, A, C, I conforme conven√ß√£o
        - Inclua uma legenda clara abaixo da tabela
    3. **Perfis do Time**  
    - Use uma tabela listando fun√ß√£o, responsabilidades e headcounting
    4. **Governan√ßa do Time**  
    - Segementa√ß√£o do time em tr√™s n√≠veis: Estrat√©gico, T√°tico e Operacional, inclua uma breve descri√ß√£o do que √© cada n√≠vel desse.
    5. **Riscos e Estrat√©gias de Mitiga√ß√£o**  
    - Use uma tabela com colunas: Risco | Estrat√©gia de Mitiga√ß√£o
    6. **Riscos Legais e Penaliza√ß√µes**  
    - Riscos associados √° penaliza√ß√£o contratual
    - Liste estrat√©gias de Mitiga√ß√£o Correlacionadas

    ### Diretrizes de Estilo:
    - Use Markdown com `### T√≠tulo do Slide`, bullets (`-`), tabelas (`| coluna |`) e **negrito**
    - **M√°ximo de 20 linhas** de conte√∫do real por t√≥pico/slide
    - Linguagem de **comunica√ß√£o executiva**: clara, estrat√©gica, concisa
    - Estruture a informa√ß√£o com l√≥gica e hierarquia visual (ex: subt√≥picos, bullets)
    - **N√£o resuma excessivamente**; destaque o que √© relevante para decis√µes

    ### P√∫blico-alvo:
    - Linguagem: {publico['linguagem']}
    - Foco: {publico['foco']}
    - Perfil: {publico['perfil']}

    --- IN√çCIO DO RELAT√ìRIO ---

    {relatorio_md}

    --- FIM DO RELAT√ìRIO ---
    """),
    expected_output="Blocos de conte√∫do formatados em Markdown para os 6 slides da apresenta√ß√£o.",
    agent=gerador_slides
)


    resultado = gerador_slides.execute_task(slide_task)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    nome_saida = f"slides_base_{timestamp}.md"

    with open(nome_saida, "w", encoding="utf-8") as f:
        f.write(str(resultado))

    print(f"‚úÖ Slides gerados e salvos em: {nome_saida}")
